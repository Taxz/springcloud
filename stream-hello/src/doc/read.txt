1.spring cloud stream构建的应用程序与消息中间件之间是通过绑定器Binder进行关联的，绑定器对于应用程序而言起到了隔离作用，
它使得不同的消息中间件的实现细节对应用程序来说是透明的，所以对于每一个spring cloud stream的应用来说，他不需要知晓消息中间件的通信细节，
他只需知道Binder对应程序提供的抽象概念来使用消息中间件来实现业务逻辑即可，而这个抽象概念就是消息通道Channel，

2.binder 绑定器
    实现应用程序与中间件的隔离，若更换消息中间件只需更换对应的Binder

3 TestSupportBinder
    对通道的接受内容进行可靠的测试断言，

4. 发布与订阅
    spring cloud stream 中的消息通信方式遵循发布-订阅模式，一条消息发布到中间件后，通过共享的topic进行广播，topic在rabbit中代表exchange，在kafka中代表Topic

5. 消息分组
    默认情况下，会为每个消费者创建一个匿名消费组，同一个分组中的只会有一个消费者处理消息，避免重复消费，

6. 消息分区
    消息分组无法保障同一条消息多次到达会是同一个消费实例处理，分区就是解决这个问题，通过给发送的消息增加ID进行区分，通过Id将对应的消息发送到特定实例上，
spring cloud stream为分区提供了抽象的通用实现，使得不具备分区的消息中间件也增加了分区，

